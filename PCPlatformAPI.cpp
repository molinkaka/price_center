#include <string.h>

#include "longfist/LFUtils.h"
#include "PriceCenter.h"

int huobi(char *httpBody, int bodyLen, struct pc_price *pprice);
int bian(char *httpBody, int bodyLen, struct pc_price *pprice);

int parseBody(int platform, char *httpBody, int bodyLen, struct pc_price *pprice)
{
    if(platform == SOURCE_HTP) //define in LFConstants.h
        return huobi(httpBody, bodyLen, pprice);
    else if(platform == SOURCE_BTP) //define in LFConstants.h
        return bian(httpBody, bodyLen, pprice);
    else 
        return -1;
}
int priceVary(struct pc_price *pNew, struct pc_price *pLast)
{
    if(strcmp(pNew->ts, pLast->ts) > 0 && strcmp(pNew->bids, pLast->bids) && strcmp(pNew->asks, pLast->asks))
        return 1;
    else
        return 0;
}
/*
   INPUT
   httpBody   //{"status":"ok","ch":"market.ethusdt.depth.step1","ts":1536047868060,"tick":{"bids":[[287.270000000000000000,1.000000000000000000],[287.200000000000000000,20.504000000000000000],[287.180000000000000000,0.505000000000000000],[287.110000000000000000,5.000000000000000000],[287.100000000000000000,4.258500000000000000],[287.090000000000000000,1.842400000000000000],[287.070000000000000000,1.529600000000000000],[286.990000000000000000,4.000000000000000000],[286.970000000000000000,7.097100000000000000],[286.960000000000000000,5.054800000000000000],[286.940000000000000000,4.575700000000000000],[286.920000000000000000,0.009300000000000000],[286.910000000000000000,1.856000000000000000],[286.890000000000000000,0.270000000000000000],[286.860000000000000000,2.994400000000000000],[286.850000000000000000,6.972000000000000000],[286.820000000000000000,0.202000000000000000],[286.810000000000000000,29.445000000000000000],[286.800000000000000000,0.100000000000000000],[286.700000000000000000,1.040400000000000000]],"asks":[[287.390000000000000000,0.256000000000000000],[287.400000000000000000,20.703000000000000000],[287.430000000000000000,0.120000000000000000],[287.440000000000000000,4.221600000000000000],[287.480000000000000000,0.019900000000000000],[287.490000000000000000,12.000000000000000000],[287.500000000000000000,3.406000000000000000],[287.510000000000000000,5.000000000000000000],[287.530000000000000000,0.164600000000000000],[287.600000000000000000,4.703000000000000000],[287.610000000000000000,1.632100000000000000],[287.620000000000000000,2.000000000000000000],[287.650000000000000000,5.218900000000000000],[287.670000000000000000,2.775900000000000000],[287.680000000000000000,31.199000000000000000],[287.690000000000000000,1.969600000000000000],[287.700000000000000000,1.000000000000000000],[287.720000000000000000,1.000000000000000000],[287.730000000000000000,0.390000000000000000],[287.770000000000000000,0.039900000000000000]],"ts":1536047868030,"version":18577468633}
   OUTPUT
   pprice
        .ts
        .bids // [price, volumn],...
        .asks // [price, volumn],...
   RETURN
   0 //SUCCESS
   1 //FAIL
 */

int huobi(char *httpBody, int bodyLen, struct pc_price *pprice)
{
    int i, j, k;
    char *s;
    char tstmp[14];
    int slen;

    if((s = strstr(httpBody, "\"bids\":[")) == NULL) return -1;
    s += strlen("\"bids\":[");
    i = 0;j = 0;k = 0;
    slen = strlen(s);
    while(i < TOP_N && k < slen && j < (sizeof(pprice->bids) - 1))
    {
        pprice->bids[j] = s[k];
        if(s[k] == ']') i++;
        j++; k++;
    }
    if(i < TOP_N && (k >= slen || j >= (sizeof(pprice->bids) - 1))) return -1;

    if((s = strstr(s + k, "\"asks\":[")) == NULL) return -1;
    s += strlen("\"asks\":[");
    i = 0;j = 0;k = 0;
    slen = strlen(s);
    while(i < TOP_N && k < slen && j < (sizeof(pprice->asks) - 1))
    {
        pprice->asks[j] = s[k];
        if(s[k] == ']') i++;
        j++; k++;
    }
    if(i < TOP_N && (k >= slen || j >= (sizeof(pprice->asks) - 1))) return -1;

    memset(tstmp, 0x00, sizeof(tstmp));
    if((s = strstr(httpBody + bodyLen - 100, "ts")) == NULL) return -1;
    strncpy(tstmp, s + 4, 13); //get last ts in response
    if(strlen(tstmp) != 13) return -1;
    if((sizeof(pprice->ts) - 1) < 13) return -1;
    strcpy(pprice->ts, tstmp);
    return 0;
}

/*
   INPUT
   httpBody   // {"lastUpdateId":177298243,"bids":[["287.20000000","44.21137000",[]],["287.16000000","1.00000000",[]],["287.15000000","3.34181000",[]],["287.11000000","10.34683000",[]],["287.06000000","1.50000000",[]]],"asks":[["287.38000000","0.93468000",[]],["287.39000000","37.49182000",[]],["287.43000000","0.40000000",[]],["287.44000000","0.07984000",[]],["287.46000000","0.03827000",[]]]}
   OUTPUT
   pprice
        .ts
        .bids // [price, volumn],...
        .asks // [price, volumn],...
   RETURN
   0 //SUCCESS
   1 //FAIL
 */

int bian(char *httpBody, int bodyLen, struct pc_price *pprice)
{
    int i, j, k;
    char *s;
    char tstmp[14];
    int slen;

    memset(tstmp, 0x00, sizeof(tstmp));
    if((s = strstr(httpBody, "\"lastUpdateId\":")) == NULL) return -1;
    s += strlen("\"lastUpdateId\":");
    slen = strlen(s);
    j = 0; k = 0;
    while(s[k] != ',' && j < sizeof(tstmp) && k < slen) tstmp[j++] = s[k++];
    strcpy(pprice->ts, tstmp);

    if((s = strstr(s + k, "\"bids\":[")) == NULL) return -1;
    s += strlen("\"bids\":[");
    slen = strlen(s);
    i = 0;j = 0; k = 0;
    while(i < TOP_N && k < slen && j < (sizeof(pprice->bids) - 1))
    {
        while(s[k] != '[' && k < slen ) k++;
        pprice->bids[j++] = s[k++]; // [
        while(s[k] != '[' && k < slen && j < (sizeof(pprice->bids) - 1))
        {
            if((s[k] <= '9' && s[k] >= '0') || s[k] == '.' || s[k] == ',')
                pprice->bids[j++] = s[k++];
            else
                k++;
        }
        if(s[k] == '[' && k < slen && j < (sizeof(pprice->bids) - 1))
        {
            pprice->bids[j-1] = ']';
            pprice->bids[j++] = ',';
            k++;i++;
        }
    }
    if(i < TOP_N && (k >= slen || j >= (sizeof(pprice->bids) - 1))) return -1;
    pprice->bids[j-1] = '\0'; // ,

    if((s = strstr(s + k, "\"asks\":[")) == NULL) return -1;
    s += strlen("\"asks\":[");
    slen = strlen(s);
    i = 0;j = 0; k = 0;
    while(i < TOP_N && k < slen && j < (sizeof(pprice->asks) - 1))
    {
        while(s[k] != '[' && k < slen) k++;
        pprice->asks[j++] = s[k++]; // [
        while(s[k] != '[' && k < slen && j < (sizeof(pprice->asks) - 1))
        {
            if((s[k] <= '9' && s[k] >= '0') || s[k] == '.' || s[k] == ',')
                pprice->asks[j++] = s[k++];
            else
                k++;
        }
        if(s[k] == '[' && k < slen && j < (sizeof(pprice->asks) - 1))
        {
            pprice->asks[j-1] = ']';
            pprice->asks[j++] = ',';
            k++;i++;
        }
    }
    if(i < TOP_N && (k >= slen || j >= (sizeof(pprice->asks) - 1))) return -1;
    pprice->asks[j-1] = '\0'; // ,

    return 0;
}

/*
int main()
{
    char *tests = "{\"lastUpdateId\":177298243,\"bids\":[[\"287.20000000\",\"44.21137000\",[]],[\"287.16000000\",\"1.00000000\",[]],[\"287.15000000\",\"3.34181000\",[]],[\"287.11000000\",\"10.34683000\",[]],[\"287.06000000\",\"1.50000000\",[]]],\"asks\":[[\"287.38000000\",\"0.93468000\",[]],[\"287.39000000\",\"37.49182000\",[]],[\"287.43000000\",\"0.40000000\",[]],[\"287.44000000\",\"0.07984000\",[]],[\"287.46000000\",\"0.03827000\",[]]]}";
    char *tests2 = "{\"status\":\"ok\",\"ch\":\"market.ethusdt.depth.step1\",\"ts\":1536047868060,\"tick\":{\"bids\":[[287.270000000000000000,1.000000000000000000],[287.200000000000000000,20.504000000000000000],[287.180000000000000000,0.505000000000000000],[287.110000000000000000,5.000000000000000000],[287.100000000000000000,4.258500000000000000],[287.090000000000000000,1.842400000000000000],[287.070000000000000000,1.529600000000000000],[286.990000000000000000,4.000000000000000000],[286.970000000000000000,7.097100000000000000],[286.960000000000000000,5.054800000000000000],[286.940000000000000000,4.575700000000000000],[286.920000000000000000,0.009300000000000000],[286.910000000000000000,1.856000000000000000],[286.890000000000000000,0.270000000000000000],[286.860000000000000000,2.994400000000000000],[286.850000000000000000,6.972000000000000000],[286.820000000000000000,0.202000000000000000],[286.810000000000000000,29.445000000000000000],[286.800000000000000000,0.100000000000000000],[286.700000000000000000,1.040400000000000000]],\"asks\":[[287.390000000000000000,0.256000000000000000],[287.400000000000000000,20.703000000000000000],[287.430000000000000000,0.120000000000000000],[287.440000000000000000,4.221600000000000000],[287.480000000000000000,0.019900000000000000],[287.490000000000000000,12.000000000000000000],[287.500000000000000000,3.406000000000000000],[287.510000000000000000,5.000000000000000000],[287.530000000000000000,0.164600000000000000],[287.600000000000000000,4.703000000000000000],[287.610000000000000000,1.632100000000000000],[287.620000000000000000,2.000000000000000000],[287.650000000000000000,5.218900000000000000],[287.670000000000000000,2.775900000000000000],[287.680000000000000000,31.199000000000000000],[287.690000000000000000,1.969600000000000000],[287.700000000000000000,1.000000000000000000],[287.720000000000000000,1.000000000000000000],[287.730000000000000000,0.390000000000000000],[287.770000000000000000,0.039900000000000000]],\"ts\":1536047868030,\"version\":18577468633}}";
    struct pc_price price;
    memset(&price, 0x00, sizeof(price));
    if(bian(tests, strlen(tests), &price)) printf("parse error\n"); 
    else
        printf("%s\n%s\n%s\n%s\n", tests, price.ts, price.bids, price.asks);
    memset(&price, 0x00, sizeof(price));
    if(huobi(tests2, strlen(tests2), &price)) printf("parse error\n"); 
    else
        printf("%s\n%s\n%s\n%s\n", tests2, price.ts, price.bids, price.asks);

    return 0;
}
*/
